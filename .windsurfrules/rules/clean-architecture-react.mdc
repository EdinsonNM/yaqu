---
description: clean architecture para la creación de modulos
globs: 
---
# Cursor Code Rules

## Project Structure

The project follows a clean architecture with this folder structure:

```
src/
  domain/
    {module}/
      models/
      repositories/
      usecases/
      dtos/
  infra/
    {module}/
      services/
      hooks/
      mocks/
```

All code must be placed within these directories and follow the established conventions.

## Architecture Rules

### Domain Layer

1. **Domain Models Must Extend Serializable**
   - All models in `src/domain/{module}/models` must extend `Serializable` from `ts-serializable`
   - Use `@jsonProperty()` decorators for class properties
   - Use `@jsonName()` for snake_case to camelCase conversion
   - Include constructor that accepts Partial<T> and calls super()
   - Implementation example:
   ```ts
   import { jsonName, jsonProperty, Serializable } from "ts-serializable";
   
   export class Restaurant extends Serializable {
     @jsonProperty(String, null)
     id?: string;
   
     @jsonProperty(String)
     name: string = "";
   
     @jsonProperty(String, null)
     description?: string;
   
     @jsonProperty(String, null)
     @jsonName("logo_url")
     logoUrl?: string;
   
     @jsonProperty(Date, null)
     @jsonName("created_at")
     createdAt?: Date;
   
     constructor(data?: Partial<Restaurant>) {
       super();
       if (!data) return;
       Object.assign(this, data);
     }
   }
   ```
   - Applicable to: `*.model.ts` files

2. **Repository Interfaces as Abstract Classes**
   - Repository interfaces in `src/domain/{module}/repositories` must be abstract classes
   - Methods must return `Promise<T>` (not Observables)
   - Standard CRUD methods: `getAll()`, `getById()`, `create()`, `update()`, `delete()`
   - Implementation example:
   ```ts
   import { Restaurant } from "../models/restaurant.model";

   export abstract class RestaurantRepository {
     abstract getAll(): Promise<Restaurant[]>;
     abstract getById(id: string): Promise<Restaurant | null>;
     abstract create(data: Partial<Restaurant>): Promise<Restaurant>;
     abstract update(id: string, data: Partial<Restaurant>): Promise<Restaurant>;
     abstract delete(id: string): Promise<void>;
   }
   ```
   - Applicable to: `*.repository.ts` files

3. **DTOs Must Be Defined in Domain Layer**
   - Define DTOs in `src/domain/{module}/dtos/`
   - Include validation methods
   - Use descriptive action prefixes (e.g., `CreateRestaurantDTO`)
   - Applicable to: `*DTO.ts` files

4. **Use Cases Must Follow DI Pattern**
   - Use cases must be defined in `src/domain/{module}/usecases`
   - Use `@injectable()` and `@registry()` decorators
   - Register corresponding service repository implementation in the registry
   - Accept dependencies via constructor injection with `@inject`
   - Follow single responsibility pattern
   - Return `Promise<T>` (not Observables)
   - Follow this structure:
   ```ts
   import { injectable, inject, registry } from "tsyringe";
   import { RestaurantRepository } from "../repositories/restaurant.repository";
   import { RestaurantServiceRepository } from "../../../infra/restaurant/services/restaurant.service.repository";
   import { Restaurant } from "../models/restaurant.model";

   @injectable()
   @registry([
     {
       token: "RestaurantRepository",
       useClass: RestaurantServiceRepository,
     },
   ])
   export class GetRestaurantByIdUseCase {
     constructor(
       @inject("RestaurantRepository")
       private readonly repository: RestaurantRepository
     ) {}

     execute(id: string): Promise<Restaurant | null> {
       return this.repository.getById(id);
     }
   }
   ```
   - Applicable to: `*-*.usecase.ts` files

### Infrastructure Layer

5. **Service Implementations Must Use Supabase**
   - Implement domain repository interfaces in `src/infra/{module}/services`
   - Use `@injectable()` decorator from tsyringe
   - Inject `SupabaseClient` with token "SupabaseClient"
   - Define `tableName` property as readonly
   - Use proper error handling with Supabase responses
   - Return properly instantiated domain models
   - Follow naming convention: `{entity}.service.repository.ts`
   - Implementation example:
   ```ts
   import { injectable, inject } from "tsyringe";
   import { SupabaseClient } from "@supabase/supabase-js";
   import { RestaurantRepository } from "../../../domain/restaurant/repositories/restaurant.repository";
   import { Restaurant } from "../../../domain/restaurant/models/restaurant.model";

   @injectable()
   export class RestaurantServiceRepository implements RestaurantRepository {
     private readonly tableName = "restaurants";

     constructor(
       @inject("SupabaseClient")
       private readonly supabase: SupabaseClient
     ) {}

     async getAll(): Promise<Restaurant[]> {
       const { data, error } = await this.supabase
         .from(this.tableName)
         .select("*")
         .order("created_at", { ascending: false });

       if (error) {
         throw new Error(`Error al obtener restaurantes: ${error.message}`);
       }

       return data.map((item) => new Restaurant(item));
     }

     async getById(id: string): Promise<Restaurant | null> {
       const { data, error } = await this.supabase
         .from(this.tableName)
         .select("*")
         .eq("id", id)
         .single();

       if (error) {
         if (error.code === "PGRST116") {
           return null; // No se encontró el restaurante
         }
         throw new Error(`Error al obtener restaurante: ${error.message}`);
       }

       return new Restaurant(data);
     }

     // Other methods...
   }
   ```
   - Applicable to: `*.service.repository.ts` files

6. **Infra Hooks Must Use TanStack Query Patterns**
   - Hooks must be defined in `src/infra/{module}/hooks`
   - Use TanStack Query hooks (`useQuery`, `useMutation`, `useQueryClient`)
   - Resolve use cases with `container.resolve()`
   - Use direct Promise handling (no Observable conversion needed)
   - Handle query invalidation properly
   - Follow naming convention: `use-{entity}-{action}.ts`
   - Query hook implementation example:
   ```ts
   import { useQuery } from "@tanstack/react-query";
   import { container } from "tsyringe";
   import { GetRestaurantByIdUseCase } from "../../../domain/restaurant/usecases/get-restaurant-by-id.usecase";

   export const useRestaurantGetById = (id: string) => {
     const getRestaurantByIdUseCase = container.resolve(GetRestaurantByIdUseCase);

     return useQuery({
       queryKey: ["restaurants", id],
       queryFn: () => getRestaurantByIdUseCase.execute(id),
       enabled: !!id,
     });
   };
   ```
   - Mutation hook implementation example:
   ```ts
   import { useMutation, useQueryClient } from "@tanstack/react-query";
   import { container } from "tsyringe";
   import { CreateRestaurantUseCase } from "../../../domain/restaurant/usecases/create-restaurant.usecase";
   import { Restaurant } from "@domain/restaurant/models/restaurant.model";

   export const useRestaurantCreate = () => {
     const createRestaurantUseCase = container.resolve(CreateRestaurantUseCase);
     const queryClient = useQueryClient();

     return useMutation({
       mutationFn: (data: Partial<Restaurant>) =>
         createRestaurantUseCase.execute(data),
       onSuccess: () => {
         queryClient.invalidateQueries({ queryKey: ["restaurants"] });
       },
     });
   };
   ```
   - Applicable to: `use-*.ts` files

7. **One Hook Per Use Case**
   - Each use case needs a dedicated hook with single responsibility in `src/infra/{module}/hooks`
   - Query hooks should use `useQuery`
   - Mutation hooks should use `useMutation` with query invalidation in `onSuccess`
   - Different naming patterns for singular and plural entities:
     - Single entity actions: `use-{entity}-{action}.ts`
     - Collection actions: `use-{entity}s-{action}.ts`
   - Example of collection hook:
   ```ts
   import { useQuery } from "@tanstack/react-query";
   import { container } from "tsyringe";
   import { GetAllRestaurantsUseCase } from "../../../domain/restaurant/usecases/get-all-restaurants.usecase";

   export const useRestaurantsGetAll = () => {
     const getAllRestaurantsUseCase = container.resolve(GetAllRestaurantsUseCase);

     return useQuery({
       queryKey: ["restaurants"],
       queryFn: () => getAllRestaurantsUseCase.execute(),
     });
   };
   ```
   - Applicable to: `use-*.ts` files

8. **Mock Repositories Must Follow Naming Convention**
   - Must be defined in `src/infra/{module}/mocks`
   - Implement the same domain repository interface as service counterparts
   - Follow naming convention: `[name].mock.repository.ts`
   - Use for testing and development environments
   - Applicable to: `*.mock.repository.ts` files

9. **Modular Infra Folder Structure**
   - Each module under `src/infra/` needs its own folder structure:
     - `src/infra/{module}/services/` for repository implementations
     - `src/infra/{module}/hooks/` for TanStack Query hooks
     - `src/infra/{module}/mocks/` for mock implementations
   - File organization mirrors domain structure

### Presentation Layer

# This rule has been removed as UI guidelines will be defined separately.

# This rule has been removed as UI guidelines will be defined separately.

## Coding Standards

12. **Strict File Naming Convention**
    - Domain models: `{entity}.model.ts` (e.g., `restaurant.model.ts`)
    - Use cases: `{action}-{entity}.usecase.ts` (e.g., `get-restaurant-by-id.usecase.ts`)
    - Repository interfaces: `{entity}.repository.ts` (e.g., `restaurant.repository.ts`) 
    - Service implementations: `{entity}.service.repository.ts` (e.g., `restaurant.service.repository.ts`)
    - Mock repositories: `{entity}.mock.repository.ts` (e.g., `restaurant.mock.repository.ts`)
    - Hooks: `use-{entity}-{action}.ts` (e.g., `use-restaurant-get-by-id.ts`) or `use-{entity}s-{action}.ts` (e.g., `use-restaurants-get-all.ts`)
    - Use `snake_case` for folder names
    - Use `PascalCase` for classes, interfaces, types, and React components
    - Use `camelCase` for variables, functions, and methods

13. **Promises Must Be Consistently Handled**
    - Use async/await syntax consistently
    - Handle errors with try/catch blocks or throw errors explicitly
    - Always return properly typed Promises
    - For Supabase responses, check for errors before processing data